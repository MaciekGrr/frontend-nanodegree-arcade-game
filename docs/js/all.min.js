    /* Resources.js
 * This is simply an image loading utility. It eases the process of loading
 * image files so that they can be used within your game. It also includes
 * a simple "caching" layer so it will reuse cached images if you attempt
 * to load the same image multiple times.
 */
(function() {
    var resourceCache = {};
    var loading = [];
    var readyCallbacks = [];

    /* This is the publicly accessible image loading function. It accepts
     * an array of strings pointing to image files or a string for a single
     * image. It will then call our private image loading function accordingly.
     */
    function load(urlOrArr) {
        if(urlOrArr instanceof Array) {
            /* If the developer passed in an array of images
             * loop through each value and call our image
             * loader on that image file
             */
            urlOrArr.forEach(function(url) {
                _load(url);
            });
        } else {
            /* The developer did not pass an array to this function,
             * assume the value is a string and call our image loader
             * directly.
             */
            _load(urlOrArr);
        }
    }

    /* This is our private image loader function, it is
     * called by the public image loader function.
     */
    function _load(url) {
        if(resourceCache[url]) {
            /* If this URL has been previously loaded it will exist within
             * our resourceCache array. Just return that image rather
             * re-loading the image.
             */
            return resourceCache[url];
        } else {
            /* This URL has not been previously loaded and is not present
             * within our cache; we'll need to load this image.
             */
            var img = new Image();
            img.onload = function() {
                /* Once our image has properly loaded, add it to our cache
                 * so that we can simply return this image if the developer
                 * attempts to load this file in the future.
                 */
                resourceCache[url] = img;

                /* Once the image is actually loaded and properly cached,
                 * call all of the onReady() callbacks we have defined.
                 */
                if(isReady()) {
                    readyCallbacks.forEach(function(func) { func(); });
                }
            };

            /* Set the initial cache value to false, this will change when
             * the image's onload event handler is called. Finally, point
             * the image's src attribute to the passed in URL.
             */
            resourceCache[url] = false;
            img.src = url;
        }
    }

    /* This is used by developers to grab references to images they know
     * have been previously loaded. If an image is cached, this functions
     * the same as calling load() on that URL.
     */
    function get(url) {
        return resourceCache[url];
    }

    /* This function determines if all of the images that have been requested
     * for loading have in fact been properly loaded.
     */
    function isReady() {
        var ready = true;
        for(var k in resourceCache) {
            if(resourceCache.hasOwnProperty(k) &&
               !resourceCache[k]) {
                ready = false;
            }
        }
        return ready;
    }

    /* This function will add a function to the callback stack that is called
     * when all requested images are properly loaded.
     */
    function onReady(func) {
        readyCallbacks.push(func);
    }

    /* This object defines the publicly accessible functions available to
     * developers by creating a global Resources object.
     */
    window.Resources = {
        load: load,
        get: get,
        onReady: onReady,
        isReady: isReady
    };
})();

const modalC = document.getElementById('c-modal'),
	modalWin = document.getElementById('win-modal'),
	modalGameOver = document.getElementById('game-over-modal'),
	modalBtnWin = document.getElementById('modal-btn-win'),
	modalBtnC = document.getElementById('modal-btn-c');
var characters = modalC.getElementsByClassName('modal__character'),
	isCharSelected = true,
heartN1 = document.getElementById('heart1'),
	heartN2 = document.getElementById('heart2'),
	heartN3 = document.getElementById('heart3');

/*
	-------------------------------------------ENEMY CLASS
*/

// Enemies our player must avoid
var Enemy = function (x, y) {
	// Variables applied to each of our instances go here,
	// we've provided one for you to get started

	// Set enemy location
	this.x = -120;

	// Set enemy initial location
	this.y = 60;

	// set width and height: to use in Enemy.handleCollision() method 
	this.width = 80;
	this.height = 40;

	// Set enemy initial speed
	this.speed = 250; // low
	this.speed = 400; // medium
	this.speed = 500; // high

	// The image/sprite for our enemies, this uses a helper we've provided to easily load images
	this.sprite = 'images/enemy-bug.png';
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function (dt) {

	// Calculate random number between 1 and 3
	let randomN = Math.floor((Math.random() * 3) + 1);

	// When enemy is off-screen
	// randomize new position at which it's created
	if (this.x > 520) {

		// Reset x coordinate to off-screen
		// left side
		this.x = -120;

		// Generate enemy on one of the stone rows
		if (randomN === 1) {
			this.y = 60;
			this.speed = 500;
		} else if (randomN === 2) {
			this.y = 140;
			this.speed = 600;
		} else if (randomN === 3) {
			this.y = 230;
			this.speed = 700;
		}
	}

	this.x += (this.speed * dt);

};

// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function () {
	ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

/* 
 * Parameter: check if enemy and player collide.
 * If so, reset player to its initial location
 */
Enemy.prototype.handleCollisions = function () {

	if (this.x < player.x + player.width &&
		this.x + this.width > player.x &&
		this.y < player.y + player.height &&
		this.y + this.height > player.y) {

		// Handle lives 
		if (player.lives === 3) {
			player.loseLife(player.life1);
		} else if (player.lives === 2) {
			player.loseLife(player.life2);
		} else {
			// Handle Game Over
			player.isGameOver = true;
			setTimeout(function () {
				player.endGame();
			}, 1000);
		}
	}
}


/*
	----------------------------------------------PLAYER CLASS
 */

// Player class
var Player = function () {

	// Set initial location
	this.x = 200;
	this.y = 400;

	this.width = 80;
	this.height = 40;

	// Set initial speed
	this.speed;
	
	// Boolean: to use in Player.handleInput() method
	this.isKeyUp = true;

	// Set player directon. Empty.
	// It changes in player.handleInput() to give direction to movement
	this.direction = '';

	// Set player character
	this.sprite = 'images/char-boy.png';

	// Set player initial lives number
	this.lives = 3;

	// Assign hearts elements to three variables. To use in player.loseLife() method
	this.life1 = heartN1;
	this.life2 = heartN2;
	this.life3 = heartN3;

	// Boolean. Use it to check if game is over 
	this.isGameOver = false;
}

// Updates player position
Player.prototype.update = function (dt) {

	if (this.direction === 'right') {
		this.x += (this.speed * dt);
		this.speed = 0;
	} else if (this.direction === 'left') {
		this.x -= (this.speed * dt);
		this.speed = 0;
	} else if (this.direction === 'up') {
		this.y -= (this.speed * dt);
		this.speed = 0;
	} else if (this.direction === 'down') {
		this.y += (this.speed * dt);
		this.speed = 0;
	}

}

/* Player handleInput() method:
 * based on key input sets direction, speed
 * and checks win conditions
*/
Player.prototype.handleInput = function (key) {

	// handle direction and speed of movement
	if (key === 'right' && this.isKeyUp && this.x < 380) {
		this.direction = 'right';
		this.speed = 4000;
	} else if (key === 'left' && this.isKeyUp && this.x > 33) {
		this.direction = 'left';
		this.speed = 4000;
	} else if (key === 'up' && this.isKeyUp && this.y > 45) {
		this.direction = 'up';
		this.speed = 3100;
	} else if (key === 'up' && this.isKeyUp && this.y < 45) {
		// Player wins
		player.winGame();
	} else if (key === 'down' && this.isKeyUp && this.y < 400) {
		this.direction = 'down';
		this.speed = 3100;
	}
}

// Player render() method: draws player character on the screen
Player.prototype.render = function () {
	ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
}

/* Player method: 
 * at collision decrease lives by 1
 * hide a heart
 */ 
Player.prototype.loseLife = function (life) {
	player.lives--;
	life.style.display = 'none';
	player.x = 200;
	player.y = 400;
}

/*
 * Invoked when player wins the game:
 * displays win modal
 * reloads page if player hits enter or clicks on modal button
*/
Player.prototype.winGame = function () {
	modalWin.style.display = 'block';

	document.addEventListener('keydown', function (e) {
		if (e.keyCode === 13) {
			reloadAfterWin();
		}
	})

	modalBtnWin.addEventListener('click', function () {
		reloadAfterWin();
	})
}

/* Player method: 
 * show game over modal
 + reset game on spacebar press
*/ 
Player.prototype.endGame = function () {
	player.isGameOver = true;
	modalGameOver.style.display = 'block';
	document.addEventListener('keydown', function (e) {
		if (e.keyCode === 32 || e.keyCode === 13) {
			isCharSelected = false;
			window.location.reload(false);
		}
	})

}

// Instantiate player object
var player = new Player();

// Instantiate enemy objects
var enemy0 = new Enemy();
var enemy1 = new Enemy();
var enemy2 = new Enemy();

// Instantiate allEnemies object
var allEnemies = [];

// Push enemies into allEnemies[]
allEnemies.push(enemy0, enemy1, enemy2);

/*
 * when player wins it sets isCharSelected to false
 * and reloads the page
*/
function reloadAfterWin() {
	isCharSelected = false;
	window.location.reload(false);
}


// This listens for key presses and sends the keys to your
document.addEventListener('keyup', function (e) {
	var allowedKeys = {
		37: 'left',
		38: 'up',
		39: 'right',
		40: 'down'
	};

	player.isKeyUp = true;

	player.handleInput(allowedKeys[e.keyCode]);

});

/*
 * Iterate through DOM character div containers
 * When user clicks a character:
 * if other characters have class 'selected', remove it abd sets isCharSelected to false
 * add class 'selected' to clicked character
 * set isCharSelected to true
 * based on character's id, set player.sprite to related image url
 */
for (let character of characters) {
	character.addEventListener('click', function (e) {

		for (let character of characters) {
			character.classList.remove('selected');
			isCharSelected = false;
		}

		this.classList.add('selected');

		isCharSelected = true;

		if (e.target.id === 'boy') {
			player.sprite = 'images/char-boy.png';
		} else if (e.target.id === 'cat-girl') {
			player.sprite = 'images/char-cat-girl.png';
		} else if (e.target.id === 'horn-girl') {
			player.sprite = 'images/char-horn-girl.png';
		} else if (e.target.id === 'pink-girl') {
			player.sprite = 'images/char-pink-girl.png';
		} else {
			player.sprite = 'images/char-princess-girl.png';
		}
	})
}

/*
 * On character modal. If and when user clicks the button:
 * if no character was selected, don't do anything
 * else hide modal
 */
modalBtnC.addEventListener('click', function () {
	if (isCharSelected == false) {
		return;
	}
	modalC.style.display = 'none';
})

/* Engine.js
 * This file provides the game loop functionality (update entities and render),
 * draws the initial game board on the screen, and then calls the update and
 * render methods on your player and enemy objects (defined in your app.js).
 *
 * A game engine works by drawing the entire game screen over and over, kind of
 * like a flipbook you may have created as a kid. When your player moves across
 * the screen, it may look like just that image/character is moving or being
 * drawn but that is not the case. What's really happening is the entire "scene"
 * is being drawn over and over, presenting the illusion of animation.
 *
 * This engine makes the canvas' context (ctx) object globally available to make 
 * writing app.js a little simpler to work with.
 */

var Engine = (function (global) {
	/* Predefine the variables we'll be using within this scope,
	 * create the canvas element, grab the 2D context for that canvas
	 * set the canvas elements height/width and add it to the DOM.
	 */
	var doc = global.document,
		win = global.window,
		canvas = doc.createElement('canvas'),
		ctx = canvas.getContext('2d'),
		lastTime;

	canvas.width = 505;
	canvas.height = 606;
	doc.body.appendChild(canvas);

	/* This function serves as the kickoff point for the game loop itself
	 * and handles properly calling the update and render methods.
	 */
	function main() {
		/* Get our time delta information which is required if your game
		 * requires smooth animation. Because everyone's computer processes
		 * instructions at different speeds we need a constant value that
		 * would be the same for everyone (regardless of how fast their
		 * computer is) - hurray time!
		 */

		var now = Date.now(),
			dt = (now - lastTime) / 1000.0,
			sprite = "";

		/* Call our update/render functions, pass along the time delta to
		 * our update function since it may be used for smooth animation.
		 */
		if (player.isGameOver == false) {
			update(dt);
		}
		render();

		/* Set our lastTime variable which is used to determine the time delta
		 * for the next time this function is called.
		 */
		lastTime = now;

		/* Use the browser's requestAnimationFrame function to call this
		 * function again as soon as the browser is able to draw another frame.
		 */
		if (player.isGameOver == false) {
			win.requestAnimationFrame(main);
		}
	}

	/* This function does some initial setup that should only occur once,
	 * particularly setting the lastTime variable that is required for the
	 * game loop.
	 */
	function init() {
		lastTime = Date.now();
		main();
		//reset();
	}

	/* This function is called by main (our game loop) and itself calls all
	 * of the functions which may need to update entity's data. Based on how
	 * you implement your collision detection (when two entities occupy the
	 * same space, for instance when your character should die), you may find
	 * the need to add an additional function call here. For now, we've left
	 * it commented out - you may or may not want to implement this
	 * functionality this way (you could just implement collision detection
	 * on the entities themselves within your app.js file).
	 */
	function update(dt) {
		updateEntities(dt);
		checkCollisions();
	}

	/* This is called by the update function and loops through all of the
	 * objects within your allEnemies array as defined in app.js and calls
	 * their update() methods. It will then call the update function for your
	 * player object. These update methods should focus purely on updating
	 * the data/properties related to the object. Do your drawing in your
	 * render methods.
	 */
	function updateEntities(dt) {
		allEnemies.forEach(function (enemy) {
			enemy.update(dt);
		});
		player.update(dt);
	}


	/* This checks for collisions between an enemy and player
	 * Since entities are on axes and have width and height
	 * it's possible to check for gaps between them. 
	 * If that's the case then a collision happend,
	 * and the player goes back to its initial position.
	 */
	function checkCollisions() {
		allEnemies.forEach(function (enemy) {
			enemy.handleCollisions();
		})
	}

	/* This function initially draws the "game level", it will then call
	 * the renderEntities function. Remember, this function is called every
	 * game tick (or loop of the game engine) because that's how games work -
	 * they are flipbooks creating the illusion of animation but in reality
	 * they are just drawing the entire screen over and over.
	 */

	function render() {
		/* This array holds the relative URL to the image used
		 * for that particular row of the game level.
		 */
		var rowImages = [
                'images/water-block.png', // Top row is water
                'images/stone-block.png', // Row 1 of 3 of stone
                'images/stone-block.png', // Row 2 of 3 of stone
                'images/stone-block.png', // Row 3 of 3 of stone
                'images/grass-block.png', // Row 1 of 2 of grass
                'images/grass-block.png' // Row 2 of 2 of grass
            ],
			numRows = 6,
			numCols = 5,
			row, col;

		// Before drawing, clear existing canvas
		ctx.clearRect(0, 0, canvas.width, canvas.height)

		/* Loop through the number of rows and columns we've defined above
		 * and, using the rowImages array, draw the correct image for that
		 * portion of the "grid"
		 */
		for (row = 0; row < numRows; row++) {
			for (col = 0; col < numCols; col++) {
				/* The drawImage function of the canvas' context element
				 * requires 3 parameters: the image to draw, the x coordinate
				 * to start drawing and the y coordinate to start drawing.
				 * We're using our Resources helpers to refer to our images
				 * so that we get the benefits of caching these images, since
				 * we're using them over and over.
				 */
				ctx.drawImage(Resources.get(rowImages[row]), col * 101, row * 83);
			}
		}

		renderEntities();
	}

	/* This function is called by the render function and is called on each game
	 * tick. Its purpose is to then call the render functions you have defined
	 * on your enemy and player entities within app.js
	 */
	function renderEntities() {
		/* Loop through all of the objects within the allEnemies array and call
		 * the render function you have defined.
		 */
		allEnemies.forEach(function (enemy) {
			enemy.render();
		});
		player.render();
	}

	/* This function does nothing but it could have been a good place to
	 * handle game reset states - maybe a new game menu or a game over screen
	 * those sorts of things. It's only called once by the init() method.
	 */
	// function reset(){}

	/* Go ahead and load all of the images we know we're going to need to
	 * draw our game level. Then set init as the callback method, so that when
	 * all of these images are properly loaded our game will start.
	 */

	Resources.load([
        'images/stone-block.png',
        'images/water-block.png',
        'images/grass-block.png',
        'images/enemy-bug.png',
        'images/char-boy.png',
		'images/char-cat-girl.png',
		'images/char-horn-girl.png',
		'images/char-pink-girl.png',
		'images/char-princess-girl.png'
	]);
	Resources.onReady(init);

	/* Assign the canvas' context object to the global variable (the window
	 * object when run in a browser) so that developers can use it more easily
	 * from within their app.js files.
	 */
	global.ctx = ctx;
})(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
